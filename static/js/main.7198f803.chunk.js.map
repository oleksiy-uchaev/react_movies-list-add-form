{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utils/pattern.js","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","isLink","isNotEmpty","TextField","name","value","label","required","setErrorCount","onChange","useState","Math","random","toString","slice","id","touched","setToched","isValid","setIsValid","hasError","handleBlur","newValue","test","validateInput","useEffect","document","querySelectorAll","length","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","setTitle","setDescription","setImdbId","setImgUrl","setmdbUrl","count","setCount","errorCount","newMovie","isFormValid","onSubmit","preventDefault","current","disabled","App","moviesFromServer","newMovieList","setNewMovieList","newMovieObj","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7198f803.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export const pattern = {\n  // eslint-disable-next-line max-len\n  isLink: /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/,\n  isNotEmpty: /[\\S\\s]+[\\S]+/,\n};\n","import classNames from 'classnames';\nimport React, { useState, useEffect } from 'react';\nimport { pattern } from '../../utils/pattern';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  setErrorCount: (newValue: number) => void,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  setErrorCount = () => {},\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setToched] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n\n  const hasError = touched && required && !isValid;\n\n  const validateInput = (newValue: string) => {\n    switch (name) {\n      case 'description':\n        return true;\n\n      case 'imgUrl':\n      case 'imdbUrl':\n        return pattern.isLink.test(newValue);\n\n      default:\n        return pattern.isNotEmpty.test(newValue);\n    }\n  };\n\n  const handleBlur = () => {\n    setToched(true);\n    setIsValid(validateInput(value));\n  };\n\n  useEffect(() => {\n    setErrorCount(document.querySelectorAll('.help').length);\n  }, [isValid]);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => handleBlur()}\n        />\n      </div>\n\n      { hasError && (\n        <p className=\"help is-danger\">{`valid ${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void,\n};\n\nexport const NewMovie = ({ onAdd }: Props) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setmdbUrl] = useState('');\n\n  const [count, setCount] = useState(0);\n  const [errorCount, setErrorCount] = useState(0);\n\n  const newMovie: Movie = {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setImdbId('');\n    setImgUrl('');\n    setmdbUrl('');\n    setDescription('');\n  };\n\n  const handleSabmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd(newMovie);\n    setCount(current => (current + 1));\n    setErrorCount(0);\n    resetForm();\n  };\n\n  const isFormValid = title && imdbId && imdbUrl && imgUrl && errorCount === 0;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSabmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        value={title}\n        onChange={setTitle}\n        setErrorCount={setErrorCount}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        value={description}\n        onChange={setDescription}\n        setErrorCount={setErrorCount}\n        required\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        setErrorCount={setErrorCount}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        value={imdbUrl}\n        onChange={setmdbUrl}\n        setErrorCount={setErrorCount}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        value={imdbId}\n        onChange={setImdbId}\n        setErrorCount={setErrorCount}\n        required\n      />\n\n      <div className=\"field is-grouped is-justify-content-space-between\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\nimport './App.scss';\n\nexport const App = () => {\n  const [newMovieList, setNewMovieList] = useState(moviesFromServer);\n\n  const onAdd = (newMovieObj: Movie) => {\n    setNewMovieList([...newMovieList, newMovieObj]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={newMovieList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}